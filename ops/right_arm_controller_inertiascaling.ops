#########################################################################
#																		#
# Right Philips Experimental Robotic Arm deployer file.					#
#																		#
# Max Baeten															#
#																		#
#########################################################################

#### DECLARATION OF PARAMETERS ####
var double TS 					= 0.001
var string RIGHT_ARM_SHOULDER 	= os.getenv("RIGHT_ARM_SHOULDER")
var string RIGHT_ARM_UPPERARM 	= os.getenv("RIGHT_ARM_UPPERARM")
var string RIGHT_ARM_LOWERARM 	= os.getenv("RIGHT_ARM_LOWERARM")
var strings JOINT_NAMES 		= strings( "shoulder_yaw_joint_right", "shoulder_pitch_joint_right", "shoulder_roll_joint_right", "elbow_pitch_joint_right", "elbow_roll_joint_right", "wrist_pitch_joint_right", "wrist_yaw_joint_right" ) 
var strings DUMMY_JOINT_NAMES 	= strings( "finger1_joint_right", "finger1_tip_joint_right", "finger2_joint_right", "finger2_tip_joint_right" )
var array UPPERJOINTLIMIT 		= array (	0.0,		1.57,		1.57, 		2.23,  		1.83, 		0.95,  		0.61,  		4.0		)
var array LOWERJOINTLIMIT 		= array (	-1.57,		-1.57,		-1.57,  	0.0, 		-1.83,		-0.95, 		-0.61, 		-4.0	)
var array MAXERRORS 			= array (	0.09,     	0.09,   	0.09,     	0.09, 	   	0.09,    	0.09, 	   	0.09, 		2.0		)
var double PI					= 3.141592
var double TWOPI				= 2.0*PI
var int N						= 8
var int BODYNUMBER 				= 4
var string BODYPARTNAME 		= "right_arm"
var bool HOMEABLE 				= false
var bool HOMINGOBLIGATORY		= false
var bool RESETTABLE				= true
var double GR_SM	= 1.0/550.0;			var double GR_S3	= 1.0/371.25;			var double GR_EM	= 1.0/410.0;			var double GR_WM	= 1.0/350.0; 			var double GR_HM	= 196.0/3249.0
var double KE_SM	= 0.0259;				var double KE_S3	= 0.0259;				var double KE_EM	= 0.0234;				var double KE_WM	= 0.0212; 				var double KE_HM	= 0.0160;
var double ECNTS_SM	= 256.0*4.0;			var double ECNTS_S3	= 256.0*4.0;			var double ECNTS_EM	= 500.0*4.0;			var double ECNTS_WM	= 128.0*4.0; 			var double ECNTS_HM	= 8.0*128.0*4.0
var double ENC2SI_SM=(TWOPI*GR_SM)/ECNTS_SM;var double ENC2SI_S3=(TWOPI*GR_S3)/ECNTS_S3;var double ENC2SI_EM=(TWOPI*GR_SM)/ECNTS_EM;var double ENC2SI_WM=(TWOPI*GR_SM)/ECNTS_WM;var double ENC2SI_HM=(TWOPI*GR_SM)/ECNTS_HM 
var double B_SM 	= 0.00000335;			var double B_S3 	= 0.00000335;			var double B_EM 	= 0.00000108;			var double B_WM 	= 0.00000042;			var double B_HM 	= 0.0000000543;
var double Bq_SM 	= B_SM/(GR_SM*GR_SM);	var double Bq_S3 	= B_S3/(GR_S3*GR_S3);	var double Bq_EM 	= B_EM/(GR_EM*GR_EM);	var double Bq_WM 	= B_WM/(GR_WM*GR_WM);	var double Bq_HM 	= B_HM/(GR_HM/GR_HM);
var double sBq_SM 	= Bq_SM/1.0;			var double sBq_S3 	= Bq_S3;				var double sBq_EM 	= Bq_EM;	 			var double sBq_WM 	= Bq_WM;				var double sBq_HM 	= Bq_HM;
var double K_SM		= 1400.0;				var double K_S3		= 1.0;					var double K_EM		= 1.0;					var double K_WM		= 1.0;					var double K_HM		= 1.0;
var double D_SM		= 3.0;					var double D_S3		= 1.0;					var double D_EM		= 1.0;					var double D_WM		= 1.0;					var double D_HM		= 1.0;

### AddBodyPart ###
Supervisor.AddBodyPart(BODYNUMBER, BODYPARTNAME, HOMEABLE, HOMINGOBLIGATORY, RESETTABLE)

### HIGH PRIORITY COMPONENTS ####
## Read reference joint angles ###
loadComponent("RPERA_ReadReferences","SOURCES::BenchmarkReference")
addPeer("Supervisor","RPERA_ReadReferences")
setActivity("RPERA_ReadReferences",TS,HighestPriority,ORO_SCHED_RT)
RPERA_ReadReferences.vector_size 			= N
RPERA_ReadReferences.configure
var double STR = 1.5
RPERA_ReadReferences.referenceFunction1     = array (   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
RPERA_ReadReferences.referenceFunction2     = array (   0.0,    STR,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
RPERA_ReadReferences.referenceFunction3     = array (   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
RPERA_ReadReferences.referenceFunction4     = array (   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
RPERA_ReadReferences.referenceFunction5     = array (   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
RPERA_ReadReferences.referenceFunction6     = array (   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
RPERA_ReadReferences.referenceFunction7     = array (   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
RPERA_ReadReferences.referenceFunction8     = array (   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
RPERA_ReadReferences.timeFunction           = array (   1.0,    2.0,   12.0,   16.0,   20.0,   25.0,   30.0,   35.0,   40.0,   45.0,   50.0)

### Motor to joint angles ###
loadComponent("RPERA_MotorToJointSpace","MATH::MatrixTransform")
addPeer("Supervisor","RPERA_MotorToJointSpace")
setActivity("RPERA_MotorToJointSpace",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_MotorToJointSpace.Nrows 				= N
RPERA_MotorToJointSpace.Ncolumns			= N
RPERA_MotorToJointSpace.configure
RPERA_MotorToJointSpace.function1 			= array  ( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function2 			= array  ( 0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function3 			= array  ( 0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function4 			= array  ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function5 			= array  ( 0.0,  0.0,  0.0, -0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function6 			= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
RPERA_MotorToJointSpace.function7 			= array  ( 0.0,  0.0,  0.0,  0.0,  0.0, -0.5,  0.5,  0.0)
RPERA_MotorToJointSpace.function8 			= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Interpolator ###
loadComponent("RPERA_ReferenceGenerator","SOURCES::ReferenceGenerator")
addPeer("Supervisor","RPERA_ReferenceGenerator")
setActivity("RPERA_ReferenceGenerator",TS,HighestPriority,ORO_SCHED_RT)
RPERA_ReferenceGenerator.vector_size 		= N
RPERA_ReferenceGenerator.number_of_inports 	= 1
RPERA_ReferenceGenerator.inport_sizes 		= ints (N)
RPERA_ReferenceGenerator.InterpolatorDt 	= TS
RPERA_ReferenceGenerator.InterpolatorEps	= 1.0
RPERA_ReferenceGenerator.minPosition		= LOWERJOINTLIMIT
RPERA_ReferenceGenerator.maxPosition		= UPPERJOINTLIMIT
RPERA_ReferenceGenerator.maxVelocity		= array (1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)
RPERA_ReferenceGenerator.maxAcceleration	= array (1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5)
#RPERA_ReferenceGenerator.maxVelocity		= array (1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)
#RPERA_ReferenceGenerator.maxAcceleration	= array (1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5)
RPERA_ReferenceGenerator.configure

### LOAD READENCODERS
loadComponent("RPERA_ReadEncoders","SOEM::ReadEncoders")
addPeer("Supervisor","RPERA_ReadEncoders")
setActivity("RPERA_ReadEncoders",TS,HighestPriority,ORO_SCHED_RT)
RPERA_ReadEncoders.encoderbits 				= 65536
RPERA_ReadEncoders.enc2SI 					= array (ENC2SI_SM ,ENC2SI_SM, ENC2SI_S3 , ENC2SI_EM , ENC2SI_EM , ENC2SI_WM , ENC2SI_WM , ENC2SI_HM )
RPERA_ReadEncoders.configure

### Gripper force controller ###
loadComponent("RPERA_GripperControl","ARM::GripperControl")
addPeer("Supervisor","RPERA_GripperControl")
setActivity("RPERA_GripperControl",TS,HighestPriority/5,ORO_SCHED_RT)
RPERA_GripperControl.threshold_closed 		= 9.0
RPERA_GripperControl.max_pos 				= 5.3
RPERA_GripperControl.gripper_gain 			= 0.1
RPERA_GripperControl.configure

### Conversion analog PERA_IO values to torques ###
loadComponent("RPERA_SensorTorques","ARM::SensorTorquesAutoC3")
addPeer("Supervisor","RPERA_SensorTorques")
setActivity("RPERA_SensorTorques",TS,HighestPriority,ORO_SCHED_RT)
RPERA_SensorTorques.vector_size				= N
RPERA_SensorTorques.c1 						= array (35.5,		32.0,		94.0,		20.0,		825.0,		1.0,		1.0,		32.3375		)
RPERA_SensorTorques.c2 						= array ( -0.2,		-0.4,	     1.0,		-2.2,		1.0,		1.0,		1.0,		0.2			)
RPERA_SensorTorques.scaling					= array ( 1.0/70.8,	1.0/70.8,	 1.0,		1.0,		1.0,		1.0,		1.0,		1.0			)
RPERA_SensorTorques.configure

### Motor to joint angles ###
loadComponent("RPERA_MotorToJointSpaceTorque","MATH::MatrixTransform")
addPeer("Supervisor","RPERA_MotorToJointSpaceTorque")
setActivity("RPERA_MotorToJointSpaceTorque",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_MotorToJointSpaceTorque.Nrows 		= N
RPERA_MotorToJointSpaceTorque.Ncolumns		= N
RPERA_MotorToJointSpaceTorque.configure
RPERA_MotorToJointSpaceTorque.function1 	= array  ( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpaceTorque.function2 	= array  ( 0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpaceTorque.function3 	= array  ( 0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpaceTorque.function4 	= array  ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpaceTorque.function5 	= array  ( 0.0,  0.0,  0.0, -0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpaceTorque.function6 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
RPERA_MotorToJointSpaceTorque.function7 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0, -0.5,  0.5,  0.0)
RPERA_MotorToJointSpaceTorque.function8 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### TORQUEDIFF - Differentiates torque output
loadComponent("RPERA_TorqueDiff","MATH::RealTimeDerivator")
addPeer("Supervisor","RPERA_TorqueDiff")
setActivity("RPERA_TorqueDiff",TS,HighestPriority,ORO_SCHED_RT)
RPERA_TorqueDiff.vector_size				= N
RPERA_TorqueDiff.bw	 						= 10.0
RPERA_TorqueDiff.configure

### Joint to motor torques ###
loadComponent("RPERA_JointToMotorSpace","MATH::MatrixTransform")
addPeer("Supervisor","RPERA_JointToMotorSpace")
setActivity("RPERA_JointToMotorSpace",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_JointToMotorSpace.Nrows 				= N
RPERA_JointToMotorSpace.Ncolumns 			= N
RPERA_JointToMotorSpace.configure
RPERA_JointToMotorSpace.function1			= array ( 0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function2			= array (-0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function3 			= array ( 0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function4 			= array ( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function5 			= array ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function6 			= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
RPERA_JointToMotorSpace.function7 			= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
RPERA_JointToMotorSpace.function8 			= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Negative feedback controller ###
loadComponent("RPERA_Controller","FILTERS::Controller")
setActivity("RPERA_Controller",0.0,HighestPriority,ORO_SCHED_RT)
addPeer("Supervisor","RPERA_Controller")
RPERA_Controller.vector_size    			= N
RPERA_Controller.controllers				= strings("WeakIntegrator","LeadLag","LowPass")
RPERA_Controller.sampling_time				= TS
RPERA_Controller.number_of_refports			= 1
RPERA_Controller.refinport_sizes			= ints (N)
RPERA_Controller.number_of_ffwports			= 0
RPERA_Controller.gains						= array(190.0*KE_SM,125.0*KE_SM,91.0*KE_S3,	98.0*KE_EM,	55.0*KE_EM,	17500.0*KE_WM,	21500.0*KE_WM, 	5000.0*KE_HM);
RPERA_Controller.zero_freq_WeakIntegrator	= array(0.000001, 	0.000001, 	0.000001,	0.000001, 	0.000001, 	0.02, 			0.02, 			0.000001);
RPERA_Controller.zero_freq_LeadLag			= array(3.0, 		3.0, 		3.0, 		3.0, 		4.5,		5.0,  			5.0,  			4.5)
RPERA_Controller.pole_freq_LeadLag			= array(50.0, 		50.0, 		50.0, 		100.0, 		100.0, 		40.0, 			40.0, 			45.0)
RPERA_Controller.pole_freq_LowPass			= array(125.0, 		125.0, 		125.0, 		125.0, 		62.5, 		125.0, 			125.0, 			125.0)
RPERA_Controller.pole_damp_LowPass			= array(0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7, 			0.7, 			0.7)
RPERA_Controller.configure

### RPERA_GRAV - FOR GRAVITY TORQUE COMPENSATION
loadComponent("RPERA_GRAV","MATH::Sine")
addPeer("Supervisor","RPERA_GRAV")
setActivity("RPERA_GRAV",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_GRAV.vectorsize 						= N
RPERA_GRAV.gain								= array(0.0255, 	0.0255, 	0.0,		0.0,	 	0.0, 		0.0, 		0.0, 		0.0)
RPERA_GRAV.configure

### TORQUEFEEDBACK
loadComponent("RPERA_TorqueFeedback","FORCECONTROL::TorqueFeedback")
addPeer("Supervisor","RPERA_TorqueFeedback")
setActivity("RPERA_TorqueFeedback",TS,HighestPriority,ORO_SCHED_RT)
RPERA_TorqueFeedback.N						= N
RPERA_TorqueFeedback.BBtinvDiagonal			= array( 1.0,		1.0, 		1.0, 		1.0, 		1.0, 		1.0, 		1.0,		1.0) 
RPERA_TorqueFeedback.DKinvDiagonal			= array( 0.0,		0.0021, 	0.0, 		0.0, 		0.0, 		0.0, 		0.0,		0.0) 
RPERA_TorqueFeedback.configure

### RPERA_GAIN - ADDING FFWS AND CONTROLLER OUTPUT
loadComponent("RPERA_ADD","MATH::Addition")
addPeer("Supervisor","RPERA_ADD")
setActivity("RPERA_ADD",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_ADD.vectorsize 						= N
RPERA_ADD.numberofinputs 					= 5
RPERA_ADD.configure

### RPERA_GAIN - FOR TORQUE TO CURRENT
loadComponent("RPERA_GAIN","MATH::Gain")
addPeer("Supervisor","RPERA_GAIN")
setActivity("RPERA_GAIN",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_GAIN.vectorsize 						= N
RPERA_GAIN.gain								= array(1.0/KE_SM,	1.0/KE_SM,	1.0/KE_S3,	1.0/KE_EM,	1.0/KE_EM,		1.0/KE_WM,	1.0/KE_WM,	1.0/KE_HM)
RPERA_GAIN.configure

#Calculating Feed Forward
loadComponent("RPERA_FFW","FILTERS::FeedForward")
addPeer("Supervisor","RPERA_FFW")
setActivity("RPERA_FFW",TS,HighestPriority,ORO_SCHED_RT)
RPERA_FFW.vector_size 						= N
RPERA_FFW.coulomb_gain 						= array(0.0, 		0.0133, 	0.0, 		0.0, 		0.0017, 		0.0, 		0.0, 		0.0)
RPERA_FFW.viscous_gain 						= array(0.0, 		0.0, 		0.0, 		0.0, 		0.001, 			0.0, 		0.0, 		0.0)
RPERA_FFW.acceleration_gain 				= array(0.0, 		0.0055, 	0.0, 		0.0, 		0.00095, 		0.0, 		0.0, 		0.0)
RPERA_FFW.direction_gain 					= array(0.0, 		0.0, 		0.0, 		0.0, 		0.0, 			0.0, 		0.0, 		0.0)
RPERA_FFW.configure

### Safety ###
loadComponent("RPERA_Safety","SUPERVISORY::Safety")
addPeer("Supervisor","RPERA_Safety")
setActivity("RPERA_Safety",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_Safety.NJ								= N
RPERA_Safety.NM								= N
RPERA_Safety.maxJointErrors					= MAXERRORS
RPERA_Safety.motorSaturations				= array (1000.0, 	1000.0,	 	400.0, 	   	500.0,  	500.0, 	   	500.0, 		500.0, 		900.0)
RPERA_Safety.maxConSatTime					= 5.0
RPERA_Safety.configure

### Output limiter ###
loadComponent("RPERA_JointOutputLimiter","DISCONTINUITIES::Saturation")
addPeer("Supervisor","RPERA_JointOutputLimiter")
setActivity("RPERA_JointOutputLimiter",0.0,HighestPriority/5,ORO_SCHED_RT)
RPERA_JointOutputLimiter.vector_size 		= N
RPERA_JointOutputLimiter.upper_limit 		= UPPERJOINTLIMIT
RPERA_JointOutputLimiter.lower_limit 		= LOWERJOINTLIMIT
RPERA_JointOutputLimiter.configure

### Publishing joint angles on ROS-topic ###
loadComponent("RPERA_WriteClippedJointAngles","ROS::DoublesToJointState")
addPeer("Supervisor","RPERA_WriteClippedJointAngles")
setActivity("RPERA_WriteClippedJointAngles",0.05,LowestPriority,ORO_SCHED_OTHER)
RPERA_WriteClippedJointAngles.JointNames 	= JOINT_NAMES
RPERA_WriteClippedJointAngles.configure

#### Diagnostics ###
loadComponent("RPERA_Diagnostics","ROS::RosDiagnostics")
addPeer("Supervisor","RPERA_Diagnostics")
setActivity("RPERA_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
RPERA_Diagnostics.statusname 				= BODYPARTNAME+"_Controller"
RPERA_Diagnostics.NumberOfVectorPorts 		= 3
RPERA_Diagnostics.NumberOfBoolPorts 		= 1
RPERA_Diagnostics.configure
RPERA_Diagnostics.vecname1 					= "Reference Interpolator"
RPERA_Diagnostics.vecname2 					= "Joint Errors"
RPERA_Diagnostics.vecname3 					= "Reference Path Planning"
RPERA_Diagnostics.boolname1 				= "Error"

#### SET UP JOINTSTATE AGGREGATOR ####
JointStateAggregator.addJointNames(JOINT_NAMES)
JointStateAggregator.addJointNames(DUMMY_JOINT_NAMES)
JointStateAggregator.addAggregationPort(BODYPARTNAME)

#### Setting up tracing ###
loadComponent("Tracing","Signal::Tracing")
addPeer("Supervisor","Tracing")
setActivity("Tracing",TS,HighestPriority,ORO_SCHED_RT)
Tracing.vector_sizes = array (8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0)
Tracing.buffersize =  20*1000;
Tracing.filename = "/home/amigo/ros/data/hardware_tracing/max/SCALING/SC_RQ2.dat"
Tracing.Ts = TS
Tracing.configure
connect ("RPERA_ReferenceGenerator.velout",			"Tracing.in1",                              ConnPolicy()) ; # vel
connect ("RPERA_Controller.jointErrors",			"Tracing.in2",                              ConnPolicy()) ; # err
connect ("RPERA_MotorToJointSpaceTorque.out",		"Tracing.in3",                              ConnPolicy()) ; # tau
connect ("RPERA_TorqueFeedback.outu",				"Tracing.in4",                              ConnPolicy()) ; # tfu
connect ("RPERA_TorqueFeedback.outt",				"Tracing.in5",                              ConnPolicy()) ; # tft
connect ("RPERA_TorqueFeedback.outtd",				"Tracing.in6",                              ConnPolicy()) ; # tft
connect ("RPERA_GRAV.out",							"Tracing.in7",                              ConnPolicy()) ; # gra
connect ("RPERA_FFW.out",							"Tracing.in8",                              ConnPolicy()) ; # fri

#### CONNECT COMPONENTS ####
## Control loop	## 
connect (RIGHT_ARM_SHOULDER+".encoder1",			"RPERA_ReadEncoders.enc1_in", 				ConnPolicy() ); # Enc 1
connect (RIGHT_ARM_SHOULDER+".encoder2",			"RPERA_ReadEncoders.enc2_in", 				ConnPolicy() ); # Enc 2
connect (RIGHT_ARM_UPPERARM+".encoder1",			"RPERA_ReadEncoders.enc3_in", 				ConnPolicy() ); # Enc 3
connect (RIGHT_ARM_UPPERARM+".encoder2",			"RPERA_ReadEncoders.enc4_in", 				ConnPolicy() ); # Enc 4
connect (RIGHT_ARM_UPPERARM+".encoder3",			"RPERA_ReadEncoders.enc5_in", 				ConnPolicy() ); # Enc 5
connect (RIGHT_ARM_LOWERARM+".encoder1",			"RPERA_ReadEncoders.enc6_in", 				ConnPolicy() ); # Enc 6
connect (RIGHT_ARM_LOWERARM+".encoder2",			"RPERA_ReadEncoders.enc7_in", 				ConnPolicy() ); # Enc 7
connect (RIGHT_ARM_LOWERARM+".encoder3",			"RPERA_ReadEncoders.enc8_in", 				ConnPolicy() ); # Enc 8
connect ("RPERA_ReadEncoders.out",					"RPERA_MotorToJointSpace.in", 				ConnPolicy() ); # Position MS
connect ("RPERA_MotorToJointSpace.out",				"RPERA_Controller.pos_in", 					ConnPolicy() ); # Position JS
connect ("RPERA_AnalogIns.out1",					"RPERA_SensorTorques.voltage_in", 			ConnPolicy() ); # sensor voltage
connect ("RPERA_SensorTorques.measured_torques_out","RPERA_MotorToJointSpaceTorque.in",			ConnPolicy() ); # tau
connect ("RPERA_MotorToJointSpaceTorque.out",		"RPERA_TorqueDiff.u",						ConnPolicy() );
connect ("RPERA_TorqueDiff.ue",						"RPERA_TorqueFeedback.in_tau",				ConnPolicy() );
connect ("RPERA_TorqueDiff.ude",					"RPERA_TorqueFeedback.in_taudot",			ConnPolicy() ); # tau_dot
connect ("RPERA_Controller.out",					"RPERA_TorqueFeedback.in_u", 				ConnPolicy() ); # u
connect ("RPERA_TorqueFeedback.outu",				"RPERA_ADD.in1_ev", 						ConnPolicy() ); # CE u
connect ("RPERA_TorqueFeedback.outt",				"RPERA_ADD.in2", 							ConnPolicy() ); # CE tau
connect ("RPERA_TorqueFeedback.outtd",				"RPERA_ADD.in3", 							ConnPolicy() ); # CE taud
connect ("RPERA_FFW.out",							"RPERA_ADD.in4",							ConnPolicy() ); # CE F FFW
connect ("RPERA_GRAV.out",							"RPERA_ADD.in5",							ConnPolicy() ); # CE G FFW
connect ("RPERA_ADD.out",							"RPERA_GAIN.in", 							ConnPolicy() );
connect ("RPERA_GAIN.out",							"RPERA_JointToMotorSpace.in", 				ConnPolicy() ); # Control Effort JS
connect ("RPERA_JointToMotorSpace.out",				"RPERA_AnalogOuts.in1", 					ConnPolicy() ); # ControlEffort MS

### FFW 
connect ("RPERA_ReferenceGenerator.velout",			"RPERA_FFW.vel_in", 						ConnPolicy() ); # vel
connect ("RPERA_ReferenceGenerator.accout",			"RPERA_FFW.acc_in", 						ConnPolicy() ); # acc
connect ("RPERA_ReferenceGenerator.posout",			"RPERA_GRAV.in",							ConnPolicy() ); # pos

## References ##
connect ("RPERA_ReadReferences.pos_out",			"RPERA_ReferenceGenerator.posin1", 			ConnPolicy() ); # Ref
connect ("RPERA_ReferenceGenerator.posout",			"RPERA_Controller.ref_in1", 				ConnPolicy() ); # InterpolatedReference 
connect ("RPERA_MotorToJointSpace.out",				"RPERA_ReferenceGenerator.initial_pos", 	ConnPolicy() ); # Initial position

## Gripper control ##
connect ("RPERA_SensorTorques.measured_torques_out","RPERA_GripperControl.torque_in", 			ConnPolicy() ); # Torqin
connect ("RPERA_MotorToJointSpace.out", 			"RPERA_GripperControl.position_in", 		ConnPolicy() ); # Posin

## Ros communication ##
connect ("RPERA_MotorToJointSpace.out",				"RPERA_JointOutputLimiter.in", 				ConnPolicy() ); # Positions JS
connect ("RPERA_JointOutputLimiter.out",			"RPERA_WriteClippedJointAngles.pos_in", 	ConnPolicy() ); # Clipped Positions
connect ("RPERA_WriteClippedJointAngles.out", 		"JointStateAggregator.right_arm", 			ConnPolicy() ); # Jointstate

## Safety ##
connect ("RPERA_Controller.jointErrors",			"RPERA_Safety.jointErrors", 				ConnPolicy() ); # JointErrors
connect ("RPERA_Controller.out",					"RPERA_Safety.controlEffort", 				ConnPolicy() ); # ControlEffort
connect ("RPERA_Safety.enable",						"RPERA_Controller.enable", 					ConnPolicy() ); # Enable
connect ("RPERA_Safety.enable",						"RPERA_TorqueFeedback.enable",				ConnPolicy() ); # controleffort
connect ("RPERA_Safety.error",						"Supervisor.right_arm_error", 				ConnPolicy() ); # Error
connect ("RPERA_Safety.enable",						"DigitalOuts.in1",				 			ConnPolicy() ); # Enable
#connect ("RPERA_Safety.enable",					RIGHT_ARM_UPPERARM+".enablePort", 			ConnPolicy() ); # Enable
connect ("RPERA_Safety.enable",						RIGHT_ARM_LOWERARM+".enablePort", 			ConnPolicy() ); # Enable

## Diagnostics ##
connect ("RPERA_ReadReferences.pos_out", 			"RPERA_Diagnostics.vec1", 					ConnPolicy() ); # Reference
connect ("RPERA_Controller.jointErrors",			"RPERA_Diagnostics.vec2", 					ConnPolicy() ); # JointErrors
connect ("RPERA_Controller.out", 					"RPERA_Diagnostics.vec3", 					ConnPolicy() ); # ControlEffort
connect ("RPERA_Safety.error",						"RPERA_Diagnostics.bool1", 					ConnPolicy() ); # Enable

#### CONNECT ROS STREAMS ####
stream ("RPERA_WriteClippedJointAngles.out", 		ros.topic("/amigo/right_arm/measurements"))
#stream ("RPERA_ReadReferences.in", 				ros.topic("/amigo/right_arm/references"))
stream ("RPERA_GripperControl.gripper_measurement", ros.topic("/amigo/right_gripper/measurements"))
stream ("RPERA_GripperControl.gripper_command", 	ros.topic("/amigo/right_gripper/references"))
stream ("RPERA_Diagnostics.diagnostics", 			ros.topic("/diagnostics"));

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer(	"RPERA_ReadEncoders")
Supervisor.AddAllwaysOnPeer(	"RPERA_Diagnostics")
Supervisor.AddAllwaysOnPeer(	"RPERA_JointOutputLimiter")
Supervisor.AddAllwaysOnPeer(	"RPERA_WriteClippedJointAngles")
Supervisor.AddAllwaysOnPeer(	"RPERA_MotorToJointSpace")
Supervisor.AddAllwaysOnPeer(	"RPERA_JointToMotorSpace")
Supervisor.AddAllwaysOnPeer(	"RPERA_MotorToJointSpaceTorque")
Supervisor.AddAllwaysOnPeer(	"RPERA_SensorTorques")
Supervisor.AddAllwaysOnPeer(	"RPERA_TorqueFeedback")
Supervisor.AddAllwaysOnPeer(	"RPERA_Controller")
Supervisor.AddAllwaysOnPeer(	"RPERA_FFW")
Supervisor.AddAllwaysOnPeer(	"RPERA_ADD")
Supervisor.AddAllwaysOnPeer(	"RPERA_GAIN")
Supervisor.AddAllwaysOnPeer(	"RPERA_GRAV")
Supervisor.AddAllwaysOnPeer(	"RPERA_TorqueDiff")

Supervisor.AddEnabledPeer(		"RPERA_GripperControl",		BODYNUMBER)
Supervisor.AddEnabledPeer(		"RPERA_ReferenceGenerator", BODYNUMBER)
Supervisor.AddEnabledPeer(		"RPERA_Safety", 			BODYNUMBER)
Supervisor.AddEnabledPeer(		"RPERA_ReadReferences", 	BODYNUMBER)
Supervisor.AddEnabledPeer(    	"Tracing", 					BODYNUMBER)
